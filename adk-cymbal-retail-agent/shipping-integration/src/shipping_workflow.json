{
	"snapshotNumber": "5",
	"triggerConfigs": [
		{
			"label": "Shipping provider search",
			"triggerType": "API",
			"triggerNumber": "3",
			"triggerId": "api_trigger/Shipping_API_Trigger",
			"startTasks": [
				{
					"taskId": "10"
				}
			],
			"properties": {
				"Trigger name": "Shipping_API_Trigger"
			}
		}
	],
	"taskConfigs": [
		{
			"task": "JavaScriptTask",
			"taskId": "10",
			"parameters": {
				"javaScriptEngine": {
					"key": "javaScriptEngine",
					"value": {
						"stringValue": "V8"
					}
				},
				"script": {
					"key": "script",
					"value": {
						"stringValue": "\n/**\n * Function that is called during the JavaScript Task execution.\n * @param {IntegrationEvent} event\n */\nfunction executeScript(event) {\n}"
					}
				}
			},
			"displayName": "Data Prep - Shipping company",
			"nextTasks": [
				{
					"taskId": "17",
					"displayName": "Shipping Company A"
				},
				{
					"taskId": "19",
					"displayName": "Shipping Company B"
				},
				{
					"taskId": "20",
					"displayName": "Shipping Company C"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "JavaScriptTask",
			"taskId": "14",
			"parameters": {
				"javaScriptEngine": {
					"key": "javaScriptEngine",
					"value": {
						"stringValue": "V8"
					}
				},
				"script": {
					"key": "script",
					"value": {
						"stringValue": "\n/**\n * Function that is called during the JavaScript Task execution.\n * @param {IntegrationEvent} event\n */\nfunction executeScript(event) {\n}"
					}
				}
			},
			"displayName": "Shipping Business Rules",
			"nextTasks": [
				{
					"taskId": "15"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "GenericRestV2Task",
			"taskId": "15",
			"parameters": {
				"additionalHeaders": {
					"key": "additionalHeaders",
					"value": {}
				},
				"authConfigName": {
					"key": "authConfigName",
					"value": {
						"stringValue": ""
					}
				},
				"disableSSLValidation": {
					"key": "disableSSLValidation",
					"value": {
						"booleanValue": false
					}
				},
				"followRedirects": {
					"key": "followRedirects",
					"value": {
						"booleanValue": true
					}
				},
				"httpMethod": {
					"key": "httpMethod",
					"value": {
						"stringValue": "GET"
					}
				},
				"httpParams": {
					"key": "httpParams",
					"value": {}
				},
				"jsonAdditionalHeaders": {
					"key": "jsonAdditionalHeaders",
					"value": {
						"jsonValue": "null"
					}
				},
				"requestBody": {
					"key": "requestBody",
					"value": {
						"stringValue": ""
					}
				},
				"requestorId": {
					"key": "requestorId",
					"value": {
						"stringValue": ""
					}
				},
				"responseBody": {
					"key": "responseBody",
					"value": {
						"stringArray": {
							"stringValues": [
								"$`Task_15_responseBody`$"
							]
						}
					}
				},
				"responseHeader": {
					"key": "responseHeader",
					"value": {
						"stringArray": {
							"stringValues": [
								"$`Task_15_responseHeader`$"
							]
						}
					}
				},
				"responseStatus": {
					"key": "responseStatus",
					"value": {
						"stringArray": {
							"stringValues": [
								"$`Task_15_responseStatus`$"
							]
						}
					}
				},
				"throwError": {
					"key": "throwError",
					"value": {
						"booleanValue": true
					}
				},
				"timeout": {
					"key": "timeout",
					"value": {
						"intValue": "0"
					}
				},
				"url": {
					"key": "url",
					"value": {
						"stringValue": "https://mocktarget.apigee.net"
					}
				},
				"urlFetchingService": {
					"key": "urlFetchingService",
					"value": {
						"stringValue": "HARPOON"
					}
				},
				"urlQueryStrings": {
					"key": "urlQueryStrings",
					"value": {}
				},
				"useSSL": {
					"key": "useSSL",
					"value": {
						"booleanValue": false
					}
				},
				"userAgent": {
					"key": "userAgent",
					"value": {
						"stringValue": ""
					}
				}
			},
			"displayName": "Get Shipping Label",
			"nextTasks": [
				{
					"taskId": "16"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "JsonnetMapperTask",
			"taskId": "16",
			"parameters": {
				"template": {
					"key": "template",
					"value": {
						"stringValue": "local f = import \"functions\"; // Import additional functions\n\n\n{\n    shippingLabelResponse: {\n        confirmationId: f.uuid(),\n        shippingLabelStatus: 'Confirmed',\n        shippingProvider: \"United Postal Service\",\n        shippingDetails: {\n            type: 'Overnight Air',\n            cost: '12.34',\n            currency: 'USD',\n            ETA: '1 day'\n        }\n    }\n}"
					}
				}
			},
			"displayName": "Shipping Label Confirmation",
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"conditionalFailurePolicies": {
				"failurePolicies": [
					{}
				],
				"defaultFailurePolicy": {}
			},
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "GenericConnectorTask",
			"taskId": "17",
			"parameters": {
				"actionName": {
					"key": "actionName",
					"value": {
						"stringValue": "HttpRequest"
					}
				},
				"authOverrideEnabled": {
					"key": "authOverrideEnabled",
					"value": {
						"booleanValue": false
					}
				},
				"connectionName": {
					"key": "connectionName",
					"value": {
						"stringValue": "projects/PROJECT_ID/locations/REGION/connections/shipping"
					}
				},
				"connectionVersion": {
					"key": "connectionVersion",
					"value": {
						"stringValue": "projects/PROJECT_ID/locations/global/providers/default/connectors/http/versions/1"
					}
				},
				"connectorInputPayload": {
					"key": "connectorInputPayload",
					"value": {
						"stringValue": "$`Task_17_connectorInputPayload`$"
					}
				},
				"connectorOutputPayload": {
					"key": "connectorOutputPayload",
					"value": {
						"stringValue": "$`Task_17_connectorOutputPayload`$"
					}
				},
				"operation": {
					"key": "operation",
					"value": {
						"stringValue": "EXECUTE_ACTION"
					}
				}
			},
			"displayName": "Shipping Company A",
			"nextTasks": [
				{
					"taskId": "14"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "GenericConnectorTask",
			"taskId": "19",
			"parameters": {
				"actionName": {
					"key": "actionName",
					"value": {
						"stringValue": "HttpRequest"
					}
				},
				"authOverrideEnabled": {
					"key": "authOverrideEnabled",
					"value": {
						"booleanValue": false
					}
				},
				"connectionName": {
					"key": "connectionName",
					"value": {
						"stringValue": "projects/PROJECT_ID/locations/REGION/connections/shipping"
					}
				},
				"connectionVersion": {
					"key": "connectionVersion",
					"value": {
						"stringValue": "projects/PROJECT_ID/locations/global/providers/default/connectors/http/versions/1"
					}
				},
				"connectorInputPayload": {
					"key": "connectorInputPayload",
					"value": {
						"stringValue": "$`Task_19_connectorInputPayload`$"
					}
				},
				"connectorOutputPayload": {
					"key": "connectorOutputPayload",
					"value": {
						"stringValue": "$`Task_19_connectorOutputPayload`$"
					}
				},
				"operation": {
					"key": "operation",
					"value": {
						"stringValue": "EXECUTE_ACTION"
					}
				}
			},
			"displayName": "Shipping Company B",
			"nextTasks": [
				{
					"taskId": "14"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"externalTaskType": "NORMAL_TASK"
		},
		{
			"task": "GenericConnectorTask",
			"taskId": "20",
			"parameters": {
				"actionName": {
					"key": "actionName",
					"value": {
						"stringValue": "HttpRequest"
					}
				},
				"authOverrideEnabled": {
					"key": "authOverrideEnabled",
					"value": {
						"booleanValue": false
					}
				},
				"connectionName": {
					"key": "connectionName",
					"value": {
						"stringValue": "projects/PROJECT_ID/locations/REGION/connections/shipping"
					}
				},
				"connectionVersion": {
					"key": "connectionVersion",
					"value": {
						"stringValue": "projects/PROJECT_ID/locations/global/providers/default/connectors/http/versions/1"
					}
				},
				"connectorInputPayload": {
					"key": "connectorInputPayload",
					"value": {
						"stringValue": "$`Task_20_connectorInputPayload`$"
					}
				},
				"connectorOutputPayload": {
					"key": "connectorOutputPayload",
					"value": {
						"stringValue": "$`Task_20_connectorOutputPayload`$"
					}
				},
				"operation": {
					"key": "operation",
					"value": {
						"stringValue": "EXECUTE_ACTION"
					}
				}
			},
			"displayName": "Shipping Company C",
			"nextTasks": [
				{
					"taskId": "14"
				}
			],
			"taskExecutionStrategy": "WHEN_ALL_SUCCEED",
			"externalTaskType": "NORMAL_TASK"
		}
	],
	"integrationParameters": [
		{
			"key": "`ExecutionMode`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`ErrorInfo`",
			"dataType": "JSON_VALUE",
			"defaultValue": {
				"jsonValue": "{\n  \"message\": \"\",\n  \"code\": 0.0\n}"
			},
			"isTransient": true,
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"code\": {\n      \"type\": \"number\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}"
		},
		{
			"key": "`ExecutionId`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`IntegrationName`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`Region`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`ProjectId`",
			"dataType": "STRING_VALUE",
			"defaultValue": {
				"stringValue": ""
			},
			"isTransient": true
		},
		{
			"key": "`Task_15_responseHeader`",
			"dataType": "STRING_VALUE",
			"isTransient": true,
			"producer": "1_15"
		},
		{
			"key": "`Task_15_responseBody`",
			"dataType": "STRING_VALUE",
			"isTransient": true,
			"producer": "1_15"
		},
		{
			"key": "`Task_15_responseStatus`",
			"dataType": "STRING_VALUE",
			"isTransient": true,
			"producer": "1_15"
		},
		{
			"key": "shippingLabelResponse",
			"dataType": "JSON_VALUE",
			"inputOutputType": "OUT",
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"shippingProvider\": {\n      \"type\": \"string\"\n    },\n    \"shippingDetails\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"cost\": {\n          \"type\": \"string\"\n        },\n        \"ETA\": {\n          \"type\": \"string\"\n        },\n        \"currency\": {\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"shippingLabelStatus\": {\n      \"type\": \"string\"\n    },\n    \"confirmationId\": {\n      \"type\": \"string\"\n    }\n  }\n}"
		},
		{
			"key": "shippingLabelRequest",
			"dataType": "JSON_VALUE",
			"defaultValue": {
				"jsonValue": "{\n  \"address\": \"123 my str\",\n  \"state\": \"CA\",\n  \"city\": \"Sunnyvale\",\n  \"zip\": \"94089\"\n}"
			},
			"inputOutputType": "IN",
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"zip\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"type\": \"string\"\n    },\n    \"city\": {\n      \"type\": \"string\"\n    },\n    \"state\": {\n      \"type\": \"string\"\n    }\n  }\n}"
		},
		{
			"key": "`Task_17_connectorOutputPayload`",
			"dataType": "JSON_VALUE",
			"isTransient": true,
			"producer": "1_17",
			"jsonSchema": "{\n  \"type\": \"array\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ResponseBody\": {\n        \"type\": \"string\",\n        \"description\": \"HTTP response body\"\n      },\n      \"StatusCode\": {\n        \"type\": \"number\",\n        \"description\": \"Status Code received from the HTTP Server\"\n      },\n      \"HttpVersion\": {\n        \"type\": \"string\",\n        \"description\": \"Version negotiated for HTTP Request\"\n      },\n      \"ResponseHeaders\": {\n        \"type\": \"object\",\n        \"description\": \"HTTP response headers. Will consist of (key,value) and (key, list of value) pairs\"\n      }\n    },\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n  }\n}"
		},
		{
			"key": "`Task_19_connectorOutputPayload`",
			"dataType": "JSON_VALUE",
			"isTransient": true,
			"producer": "1_19",
			"jsonSchema": "{\n  \"type\": \"array\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ResponseBody\": {\n        \"type\": \"string\",\n        \"description\": \"HTTP response body\"\n      },\n      \"StatusCode\": {\n        \"type\": \"number\",\n        \"description\": \"Status Code received from the HTTP Server\"\n      },\n      \"HttpVersion\": {\n        \"type\": \"string\",\n        \"description\": \"Version negotiated for HTTP Request\"\n      },\n      \"ResponseHeaders\": {\n        \"type\": \"object\",\n        \"description\": \"HTTP response headers. Will consist of (key,value) and (key, list of value) pairs\"\n      }\n    },\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n  }\n}"
		},
		{
			"key": "`Task_20_connectorOutputPayload`",
			"dataType": "JSON_VALUE",
			"isTransient": true,
			"producer": "1_20",
			"jsonSchema": "{\n  \"type\": \"array\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"ResponseBody\": {\n        \"type\": \"string\",\n        \"description\": \"HTTP response body\"\n      },\n      \"StatusCode\": {\n        \"type\": \"number\",\n        \"description\": \"Status Code received from the HTTP Server\"\n      },\n      \"HttpVersion\": {\n        \"type\": \"string\",\n        \"description\": \"Version negotiated for HTTP Request\"\n      },\n      \"ResponseHeaders\": {\n        \"type\": \"object\",\n        \"description\": \"HTTP response headers. Will consist of (key,value) and (key, list of value) pairs\"\n      }\n    },\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n  }\n}"
		},
		{
			"key": "`Task_17_connectorInputPayload`",
			"dataType": "JSON_VALUE",
			"defaultValue": {
				"jsonValue": "{\n  \"Method\": \"GET\"\n}"
			},
			"producer": "1_17",
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"Url\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"Url object to make request to. Can contain scheme, netloc, path, params, query, fragment in json format. If netloc is provided, it will override the host provided during connection creation\"\n    },\n    \"Method\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP request method. Eg. GET, POST, DELETE, PUT etc.\",\n      \"default\": \"GET\"\n    },\n    \"Headers\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"HTTP request headers. Will consist of (key,value) and (key, list of value) pairs\"\n    },\n    \"Body\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP request body\"\n    },\n    \"RequestHasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to send body as bytes. Base64 encoded string needs to be provided in Body parameter\",\n      \"default\": false\n    },\n    \"ResponseHasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to receive body as bytes. Base64 encoded string will be sent in the response body\",\n      \"default\": false\n    },\n    \"HttpVersion\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP Version to be used while making the request. Supported values are 1.1 and 2. If Version 2 is selected, ALPN negotiation will take place and version 1.1 will be used if server does not support version 2\",\n      \"default\": \"2\"\n    },\n    \"ResponseFormat\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Format to be used for the response. Allowed values are v1 and v2. Using v2 will return the flattened list\",\n      \"default\": \"v1\"\n    },\n    \"FailOnError\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Task should fail if HTTP response status code is 4xx or 5xx\",\n      \"default\": true\n    },\n    \"Timeout\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Timeout for the HTTP request in seconds. Maximum allowed value is 150 seconds.\"\n    }\n  }\n}"
		},
		{
			"key": "`Task_19_connectorInputPayload`",
			"dataType": "JSON_VALUE",
			"defaultValue": {
				"jsonValue": "{\n  \"Method\": \"GET\"\n}"
			},
			"producer": "1_19",
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"Url\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"Url object to make request to. Can contain scheme, netloc, path, params, query, fragment in json format. If netloc is provided, it will override the host provided during connection creation\"\n    },\n    \"Method\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP request method. Eg. GET, POST, DELETE, PUT etc.\",\n      \"default\": \"GET\"\n    },\n    \"Headers\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"HTTP request headers. Will consist of (key,value) and (key, list of value) pairs\"\n    },\n    \"Body\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP request body\"\n    },\n    \"RequestHasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to send body as bytes. Base64 encoded string needs to be provided in Body parameter\",\n      \"default\": false\n    },\n    \"ResponseHasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to receive body as bytes. Base64 encoded string will be sent in the response body\",\n      \"default\": false\n    },\n    \"HttpVersion\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP Version to be used while making the request. Supported values are 1.1 and 2. If Version 2 is selected, ALPN negotiation will take place and version 1.1 will be used if server does not support version 2\",\n      \"default\": \"2\"\n    },\n    \"ResponseFormat\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Format to be used for the response. Allowed values are v1 and v2. Using v2 will return the flattened list\",\n      \"default\": \"v1\"\n    },\n    \"FailOnError\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Task should fail if HTTP response status code is 4xx or 5xx\",\n      \"default\": true\n    },\n    \"Timeout\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Timeout for the HTTP request in seconds. Maximum allowed value is 150 seconds.\"\n    }\n  }\n}"
		},
		{
			"key": "`Task_20_connectorInputPayload`",
			"dataType": "JSON_VALUE",
			"defaultValue": {
				"jsonValue": "{\n  \"Method\": \"GET\"\n}"
			},
			"producer": "1_20",
			"jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"Url\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"Url object to make request to. Can contain scheme, netloc, path, params, query, fragment in json format. If netloc is provided, it will override the host provided during connection creation\"\n    },\n    \"Method\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP request method. Eg. GET, POST, DELETE, PUT etc.\",\n      \"default\": \"GET\"\n    },\n    \"Headers\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"HTTP request headers. Will consist of (key,value) and (key, list of value) pairs\"\n    },\n    \"Body\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP request body\"\n    },\n    \"RequestHasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to send body as bytes. Base64 encoded string needs to be provided in Body parameter\",\n      \"default\": false\n    },\n    \"ResponseHasBytes\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Whether to receive body as bytes. Base64 encoded string will be sent in the response body\",\n      \"default\": false\n    },\n    \"HttpVersion\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"HTTP Version to be used while making the request. Supported values are 1.1 and 2. If Version 2 is selected, ALPN negotiation will take place and version 1.1 will be used if server does not support version 2\",\n      \"default\": \"2\"\n    },\n    \"ResponseFormat\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Format to be used for the response. Allowed values are v1 and v2. Using v2 will return the flattened list\",\n      \"default\": \"v1\"\n    },\n    \"FailOnError\": {\n      \"type\": [\"boolean\", \"null\"],\n      \"description\": \"Task should fail if HTTP response status code is 4xx or 5xx\",\n      \"default\": true\n    },\n    \"Timeout\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Timeout for the HTTP request in seconds. Maximum allowed value is 150 seconds.\"\n    }\n  }\n}"
		}
	],
	"databasePersistencePolicy": "DATABASE_PERSISTENCE_ASYNC",
	"cloudLoggingDetails": {
		"cloudLoggingSeverity": "INFO",
		"enableCloudLogging": true
	}
}